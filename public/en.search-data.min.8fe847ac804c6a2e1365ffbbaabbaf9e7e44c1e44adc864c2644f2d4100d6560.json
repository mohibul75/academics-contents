[{"id":0,"href":"/docs/details/","title":"Details","section":"Docs","content":" 📚 Distributed Systems Lab — Detailed Breakdown # This lab is structured as a step-by-step journey through the lifecycle of building a distributed system with microservices.\n🚀 Phase 1: Monolithic Smart Library System # We begin with a monolithic design, where all components of the system reside in a single codebase.\nYou’ll Learn:\nHow to structure a monolithic application Why monoliths become difficult to scale and maintain Building core modules: Users, Catalog, Borrowing Separation of concerns: Controller → Service → Repository layers 🧩 Phase 2: Transition to Microservices # Next, we break down the monolith into independently deployable microservices.\nYou’ll Learn:\nHow to decompose services by business capability RESTful API communication between services Managing independent data sources Principles of loose coupling and bounded context 🌐 Phase 3: Reverse Proxy with Nginx # We introduce Nginx to centralize and manage access to microservices.\nYou’ll Learn:\nHow reverse proxies work Nginx configuration for routing and load balancing Handling HTTPS and static files with Nginx Benefits of centralized access control and logging 🐳 Phase 4: Containerization with Docker # Now we containerize each service to ensure consistency across environments.\nYou’ll Learn:\nWriting Dockerfiles for services Managing containers, images, and networks Creating isolated environments for each service ⚙️ Phase 5: Managing with Docker Compose # With more services, orchestration becomes important. Enter Docker Compose.\nYou’ll Learn:\nDefining multi-service environments in docker-compose.yml Networking between services Simplifying development and testing 🚢 Phase 6: Orchestration with Docker Swarm # For real-world scalability, we use Docker Swarm to orchestrate services across a cluster.\nYou’ll Learn:\nSetting up a Swarm cluster Deploying services in a distributed fashion Achieving high availability and self-healing systems 🧠 Bonus Topics: System Design # Distributed systems are more than code — they’re about design. We’ll embed the following concepts throughout the lab:\nCAP Theorem and trade-offs Designing for fault tolerance Scaling strategies (horizontal vs vertical) Caching and database patterns Observability and metrics 🎓 Final Outcome # By the end of this lab, you will have:\nBuilt and deployed a functional microservices application Practiced containerization and orchestration Understood the real-world workflow of backend and DevOps engineering Strengthened your system design thinking Ready to build your first distributed system? Let’s dive in! 🚀\n"},{"id":1,"href":"/docs/prerequisites/","title":"Prerequisites","section":"Docs","content":" 📋 Prerequisites # Before diving into the Smart Library System project, it’s important to ensure that students or participants have the foundational knowledge and hands-on exposure to the following areas:\n🌐 1. Basic Understanding of Web Application \u0026amp; Development # Understand the client-server model. Familiarity with how a web application works (browser → server → database). Concept of HTTP verbs: GET, POST, PUT, DELETE, etc. Awareness of RESTful API principles: Resource-oriented endpoints Stateless communication Uniform interface 🔧 2. API Development in Any Language # Participants should have prior experience with creating APIs in any programming language.\n💡 Reference: Check out the 🛠️ Tools \u0026amp; Technology Stack section for supported languages and frameworks (Python, Node.js, Java, C#).\nMinimum experience includes:\nRouting \u0026amp; endpoint creation Accepting and parsing JSON input Sending JSON responses Status codes (200 OK, 400 Bad Request, etc.) 🗃️ 3. Basic Database Understanding # Familiarity with relational databases such as PostgreSQL, MySQL, or MSSQL.\nStudents should know:\nCreating tables and defining schema Performing CRUD operations: SELECT, INSERT, UPDATE, DELETE Concepts like: Primary keys Foreign keys Relationships (one-to-many, many-to-many) 🔌 4. Database Integration with Backend # Experience connecting an application to a database, such as:\nUsing ORM (like SQLAlchemy, TypeORM, Hibernate, EF Core) Writing raw SQL queries or using query builders Handling database migrations (bonus) Performing DB transactions inside the application code 🔍 5. API Testing Skills # Comfortable with using tools like Postman or Bruno to:\nSend requests to an API Provide JSON body and headers View responses and validate status codes Automate collections for repeated tests 💡 For tools, see: API Testing Tools\n🐞 6. Debugging Experience # The ability to identify and troubleshoot bugs during development.\nThis includes:\nReading and understanding stack traces Using logging tools or breakpoints (e.g., print, console.log, logger.debug()) Fixing common backend issues: DB connection errors Invalid input handling Unhandled exceptions ✅ Note: These skills will ensure a smoother experience throughout the project and allow participants to focus on designing scalable microservices rather than struggling with basic development issues.\n"},{"id":2,"href":"/docs/tools/","title":"Tools","section":"Docs","content":" 🛠️ Tools \u0026amp; Technology Stack # This section outlines the recommended tools, frameworks, and platforms used in building and testing the Smart Library System (Microservices Architecture).\n🚀 Language \u0026amp; Framework Preferences # Choose any language or framework from below, depending on your expertise or lab instruction:\n🐍 Python # Framework Description FastAPI High-performance, modern API framework using ASGI. Ideal for microservices. Flask Lightweight WSGI framework. Easy to use, good for learning microservice patterns. Django Full-featured web framework. Use with Django REST Framework for API-based microservices. 🌐 Node.js # Framework Description Express.js Minimal and flexible framework for building REST APIs. Fast and widely used. ☕ Java # Framework Description Spring Boot Production-grade microservice framework with robust dependency injection and JPA support. 🧱 C# # Framework Description .NET Core / ASP.NET Core Cross-platform microservice-ready framework by Microsoft. Supports REST APIs out-of-the-box. 🌐 API Testing Tools # Tool Purpose Postman Powerful GUI for testing REST APIs. Bruno Open-source and developer-friendly API testing alternative to Postman. 🐧 Preferred Operating System # OS Version Description Ubuntu 22.04 LTS Long-Term Support, stable and widely used in cloud environments. Ubuntu 24.04 LTS (Upcoming/Recent) Updated LTS version with latest packages. 🗃️ Preferred Databases # Choose your preferred RDBMS per service — all options are supported:\nDatabase Notes PostgreSQL Open-source, feature-rich, and widely used in production. MySQL Lightweight, easy to use, and fast. MSSQL Great for enterprise-grade applications using .NET Core. Each microservice will own its own dedicated database instance.\n🔍 Database Browsing \u0026amp; Inspection Tools # Tool Description DataGrip Universal database IDE by JetBrains (supports all major RDBMS). pgAdmin PostgreSQL’s official web-based admin interface. "},{"id":3,"href":"/docs/phase-1/","title":"Phase 1","section":"Docs","content":" 📘 Smart Library System – Monolithic Architecture # Overview # The Smart Library System (Monolithic Version) is a single, unified application that handles all core functionalities: managing users, books, and book loans. This system is ideal for simple deployments where all components are tightly coupled, sharing the same runtime and database.\n🧩 Functional Modules # 1. User Management Module # Register a user (students/faculty). Update user profile. Retrieve user info. 2. Book Management Module # Add/update/remove books. View book availability. Search books by title, author, or genre. 3. Loan Management Module # Issue books to users. Return books. View active/past loans. 🛢️ Unified Database Schema # Table Description users Stores user information. books Stores book catalog details. loans Tracks issued/returned books. All modules interact with this shared relational database, typically PostgreSQL or MySQL.\n🔄 Internal Communication # All module calls happen via function calls or internal classes. Tight coupling between modules. No network-based interaction — all components reside in the same codebase and memory space. 🧪 Example API Documentation (REST Endpoints) # Here’s how external clients (like CLI tools or a potential frontend) interact with the system.\n🔹 User Endpoints # POST /api/users # Create/register a new user.\n{ \u0026#34;name\u0026#34;: \u0026#34;Alice Smith\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;alice@example.com\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;student\u0026#34; } GET /api/users/{id} # Fetch user profile by ID.\n🔹 Book Endpoints # POST /api/books # Add a new book.\n{ \u0026#34;title\u0026#34;: \u0026#34;Clean Code\u0026#34;, \u0026#34;author\u0026#34;: \u0026#34;Robert C. Martin\u0026#34;, \u0026#34;isbn\u0026#34;: \u0026#34;9780132350884\u0026#34;, \u0026#34;copies\u0026#34;: 3 } GET /api/books?search=clean # Search for books by title, author, or keyword.\n🔹 Loan Endpoints # POST /api/loans # Issue a book to a user.\n{ \u0026#34;user_id\u0026#34;: 1, \u0026#34;book_id\u0026#34;: 42 } POST /api/returns # Return a borrowed book.\n{ \u0026#34;loan_id\u0026#34;: 1001 } GET /api/loans/{user_id} # View loan history for a user.\n⚠️ Limitations of Monolithic Design # Hard to scale individual components independently. Tight coupling makes it difficult to change or test modules in isolation. Single point of failure: one bug can crash the entire app. Deployment of small changes requires redeploying the whole system. "},{"id":4,"href":"/docs/phase-2/","title":"Phase 2","section":"Docs","content":" 🧩 Smart Library System – Microservices Architecture # Overview # In the microservices version of the Smart Library System, the application is divided into three independent services — each responsible for a specific domain: User, Book, and Loan. Every service has its own database and communicates with others via HTTP APIs (no queues or Kafka involved in this version).\n🧱 Services Overview # 1. User Service # Handles registration, profile management, and user-related queries.\n🚪 REST Base Path: /api/users 📦 Owns a user database. 🔹 API Endpoints # POST /api/users # Register a new user.\n{ \u0026#34;name\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;alice@example.com\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;student\u0026#34; } GET /api/users/{id} # Fetch user details by ID.\n2. Book Service # Manages book inventory, search, and updates to availability.\n🚪 REST Base Path: /api/books 📦 Owns a book database. 🔹 API Endpoints # POST /api/books # Add a new book.\n{ \u0026#34;title\u0026#34;: \u0026#34;Clean Code\u0026#34;, \u0026#34;author\u0026#34;: \u0026#34;Robert C. Martin\u0026#34;, \u0026#34;isbn\u0026#34;: \u0026#34;9780132350884\u0026#34;, \u0026#34;copies\u0026#34;: 3 } GET /api/books?search=code # Search books by title, author, or keyword.\nPATCH /api/books/{id} # Update a book\u0026rsquo;s available copies (used by Loan Service during issue/return).\n{ \u0026#34;copies\u0026#34;: 2 } 3. Loan Service # Issues and returns books by communicating with both User Service and Book Service.\n🚪 REST Base Path: /api/loans 📦 Owns a loan database. 🔹 API Endpoints # POST /api/loans # Create a loan.\n{ \u0026#34;user_id\u0026#34;: 1, \u0026#34;book_id\u0026#34;: 42 } Process:\nValidate user_id via User Service. Validate book_id and availability via Book Service. If all checks pass, reduce the book\u0026rsquo;s available copy count. POST /api/returns # Return a borrowed book.\n{ \u0026#34;loan_id\u0026#34;: 1001 } Process:\nUpdate loan status. Increment book availability in Book Service. GET /api/loans/user/{user_id} # Get a user\u0026rsquo;s loan history (active and returned books).\n🔗 Inter-Service Communication # Loan Service makes HTTP calls to: User Service: to validate user identity. Book Service: to check and update book inventory. No shared database. Each service is data-isolated for decoupling and autonomy.\n🛢️ Databases (One per service) # Service Database Tables User Service user_db users Book Service book_db books Loan Service loan_db loans ⚙️ Deployment Strategy # Each microservice:\nRuns in its own container or VM. Has its own codebase, tests, deployment pipeline. Can be updated, scaled, or restarted independently. ✅ Advantages of Microservices # Independent development and deployment. Fault isolation: one service failing doesn’t crash the whole app. Easier scaling: Book Service can be scaled independently if traffic spikes. ⚠️ Trade-offs # Increased operational complexity. Requires robust service discovery, monitoring, and API versioning. Debugging across services can be harder without centralized logs. "},{"id":5,"href":"/docs/phase-3/","title":"Phase 3","section":"Docs","content":" 🌐 Phase 3: Reverse Proxy with Nginx # This phase introduces Nginx as a reverse proxy, acting as the single entry point to route traffic to backend microservices.\n🎯 You’ll Learn: # What is a reverse proxy and why it\u0026rsquo;s important Routing and load balancing strategies How to serve APIs and static content behind Nginx Configuring HTTPS (SSL termination) 🛠 Topics Covered: # Installing and configuring Nginx on Linux nginx.conf structure and virtual hosts Path-based routing: /api/users → User Service /api/books → Book Service /api/loans → Loan Service Static file delivery for frontend (optional) Logging requests centrally Handling 404s and upstream errors "},{"id":6,"href":"/docs/phase-4/","title":"Phase 4","section":"Docs","content":" 🐳 Phase 4: Containerization with Docker # We encapsulate each microservice into its own Docker container to achieve environment consistency and portability.\n🎯 You’ll Learn: # Why containerization is essential in microservice ecosystems How to write Dockerfiles for Python, Node.js, Java, and .NET Core apps How to build and run containers Container networking and volume mounting 🛠 Topics Covered: # Writing Dockerfiles for each service Installing dependencies inside containers Exposing ports and configuring environment variables Docker CLI basics: build, run, exec, logs Creating named networks for communication between services "},{"id":7,"href":"/docs/phase-5/","title":"Phase 5","section":"Docs","content":" ⚙️ Phase 5: Managing with Docker Compose # With multiple services running, we now use Docker Compose to manage them together through a unified configuration.\n🎯 You’ll Learn: # Structuring a docker-compose.yml file Defining services, networks, and volumes Scaling services for development/testing Making services talk to each other by name 🛠 Topics Covered: # Docker Compose syntax and service definitions Declaring DB containers (e.g., Postgres, MySQL) Health checks and restart policies Local development workflows with Compose Mounting source code with volumes: for live reloading "},{"id":8,"href":"/docs/phase-6/","title":"Phase 6","section":"Docs","content":" 🚢 Phase 6: Orchestration with Docker Swarm # Once you’ve mastered local development, we introduce Docker Swarm for distributed service orchestration.\n🎯 You’ll Learn: # Running your app on a multi-node Docker cluster Service scaling, rolling updates, and high availability Managing load balancing and service discovery 🛠 Topics Covered: # Initializing a Docker Swarm (docker swarm init) Creating overlay networks Deploying stacks via docker stack deploy Scaling services with replicas Monitoring service health and logs 🔁 Optional Lab: Simulate node failure and observe Swarm\u0026rsquo;s self-healing\n"},{"id":9,"href":"/docs/system-design/","title":"Systems Design","section":"Docs","content":" 🧠 Bonus Topics: System Design Essentials # Throughout the course, we’ll integrate key system design concepts critical to building scalable, resilient microservice-based systems.\n🧠 Concepts Discussed: # CAP Theorem: Consistency, Availability, Partition Tolerance Fault Tolerance: Retry logic, timeouts, circuit breakers Scaling Strategies: Vertical vs Horizontal Stateless service scaling Caching: When and where to use Redis or in-memory caching Database Design: Per-service DB Data duplication vs sync strategies Observability: Logs, metrics, traces Centralized logging (ELK/Loki) Prometheus \u0026amp; Grafana for monitoring "},{"id":10,"href":"/docs/about-me/","title":"About Me","section":"Docs","content":" 👨‍💻 About Me # Hello! I’m Mohibul Alam, a passionate and hands-on Senior DevOps Engineer with a strong background in cloud infrastructure, automation, and modern backend systems. I bring over 3 years of experience designing and deploying scalable, secure, and high-performance solutions across AWS, Azure, and on-premises environments.\nMy expertise lies in DevOps automation, container orchestration, observability, and backend development, with a growing interest in building intelligent systems powered by LLMs and AI agents.\nI am deeply involved in teaching and mentoring around cloud-native development and microservice architectures, and I actively contribute to building clean, efficient lab environments for students and professionals to explore real-world DevOps practices.\n🧠 What I Do # Architect and automate cloud infrastructure using Terraform, CDK, and CI/CD pipelines Deploy and manage Docker and Kubernetes environments for high availability Monitor systems with tools like Prometheus, Grafana, Tempo, and Loki Develop backend APIs using Python (FastAPI) and serverless platforms like AWS Lambda Build AI-driven applications with LLM frameworks like Promptflow, LlamaIndex, and Semantic Kernel Mentor students and junior engineers in modern software engineering practices 🎓 Education # BSc in Software Engineering\nUniversity of Dhaka, Bangladesh\nCGPA: 3.61 / 4.00\nGraduated: 2022\n📜 Certifications # 🏆 AWS Certified Solutions Architect – Associate (SAA-C03) 🛠 Certified Kubernetes Application Developer (CKAD) 🔗 Find Me Online # LinkedIn GitHub Medium "}]