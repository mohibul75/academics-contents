<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lecture 4: Docker Swarm on Distributed Systems Lab</title>
    <link>http://localhost:1313/docs/lecture-resources/lecture-4/</link>
    <description>Recent content in Lecture 4: Docker Swarm on Distributed Systems Lab</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/docs/lecture-resources/lecture-4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker Swarm</title>
      <link>http://localhost:1313/docs/lecture-resources/lecture-4/docker-swarm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/lecture-resources/lecture-4/docker-swarm/</guid>
      <description>&lt;h1 id=&#34;-docker-swarm-container-orchestration-made-simple&#34;&gt;&#xA;  üê≥ Docker Swarm: Container Orchestration Made Simple&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-docker-swarm-container-orchestration-made-simple&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;-why-do-we-need-a-container-orchestrator&#34;&gt;&#xA;  üåê Why Do We Need a Container Orchestrator?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-why-do-we-need-a-container-orchestrator&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;While Docker allows us to package and run applications in containers, managing those containers at scale‚Äîespecially in production‚Äîrequires much more. That&amp;rsquo;s where container orchestrators like Docker Swarm or Kubernetes come in.&lt;/p&gt;&#xA;&lt;p&gt;All the limitations of standalone Docker containers discussed previously are solved by introducing a Container Orchestrator:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;‚úÖ &lt;strong&gt;High Availability&lt;/strong&gt;: No single point of failure&lt;/li&gt;&#xA;&lt;li&gt;‚úÖ &lt;strong&gt;Auto-scaling&lt;/strong&gt;: Adjust to changing workloads&lt;/li&gt;&#xA;&lt;li&gt;‚úÖ &lt;strong&gt;Load Balancing&lt;/strong&gt;: Distribute traffic efficiently&lt;/li&gt;&#xA;&lt;li&gt;‚úÖ &lt;strong&gt;Service Discovery&lt;/strong&gt;: Containers can find each other&lt;/li&gt;&#xA;&lt;li&gt;‚úÖ &lt;strong&gt;Rolling Updates&lt;/strong&gt;: Zero-downtime deployments&lt;/li&gt;&#xA;&lt;li&gt;‚úÖ &lt;strong&gt;Health Monitoring&lt;/strong&gt;: Automatic recovery from failures&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;-docker-swarm-architecture&#34;&gt;&#xA;  üìä Docker Swarm Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-docker-swarm-architecture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;single-manager-architecture&#34;&gt;&#xA;  Single Manager Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#single-manager-architecture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/ds-1.png&#34; alt=&#34;Docker Swarm with one manager&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Swarm Concepts</title>
      <link>http://localhost:1313/docs/lecture-resources/lecture-4/docker-swarm-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/lecture-resources/lecture-4/docker-swarm-concepts/</guid>
      <description>&lt;h1 id=&#34;-deploying-applications-on-docker-swarm&#34;&gt;&#xA;  üöÄ Deploying Applications on Docker Swarm&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-deploying-applications-on-docker-swarm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Docker Swarm is a native container orchestration tool that allows you to deploy and manage containerized applications across a cluster of Docker nodes with ease. Understanding the core concepts helps you grasp how your application runs inside the Swarm.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/services-diagram.webp&#34; alt=&#34;Docker Swarm Service&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Source: &lt;a href=&#34;https://docs.docker.com/engine/swarm/how-swarm-mode-works/services/&#34;&gt;Docker Documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;-core-concepts&#34;&gt;&#xA;  üì¶ Core Concepts&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-core-concepts&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Docker Swarm operates with four key hierarchical components:&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-container&#34;&gt;&#xA;  1. Container&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-container&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The actual running instance of your application image&lt;/li&gt;&#xA;&lt;li&gt;Similar to a pod container in Kubernetes&lt;/li&gt;&#xA;&lt;li&gt;Executes the application code and its dependencies&lt;/li&gt;&#xA;&lt;li&gt;Isolated from other containers but shares the host OS kernel&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-task&#34;&gt;&#xA;  2. Task&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-task&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A Swarm-managed unit of work that runs exactly one container&lt;/li&gt;&#xA;&lt;li&gt;The atomic scheduling unit in Swarm&lt;/li&gt;&#xA;&lt;li&gt;Has a lifecycle: assigned ‚Üí prepared ‚Üí running ‚Üí complete (or failed)&lt;/li&gt;&#xA;&lt;li&gt;If a task fails, the scheduler creates a new task to maintain the desired state&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-service&#34;&gt;&#xA;  3. Service&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-service&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A declarative definition of an application running in the Swarm&lt;/li&gt;&#xA;&lt;li&gt;Specifies how many copies (tasks) of a container to run&lt;/li&gt;&#xA;&lt;li&gt;Defines the container image, ports, networks, volumes, and resource constraints&lt;/li&gt;&#xA;&lt;li&gt;Two service modes:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Replicated&lt;/strong&gt;: Run a specified number of replicas across the cluster&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Global&lt;/strong&gt;: Run one task on every node in the cluster&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;4-stack&#34;&gt;&#xA;  4. Stack&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-stack&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A collection of related services deployed together&lt;/li&gt;&#xA;&lt;li&gt;Defined by a single Docker Compose file&lt;/li&gt;&#xA;&lt;li&gt;Simplifies managing multiple services as a single unit&lt;/li&gt;&#xA;&lt;li&gt;Includes networks and volumes required by the services&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;-service-deployment-workflow&#34;&gt;&#xA;  üîÑ Service Deployment Workflow&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-service-deployment-workflow&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;When you deploy a service to Docker Swarm, the following happens:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
