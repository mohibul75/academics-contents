<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lecture 1: Introduction on Distributed Systems Lab</title>
    <link>http://localhost:1313/docs/lecture-resources/lecture-1/</link>
    <description>Recent content in Lecture 1: Introduction on Distributed Systems Lab</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/docs/lecture-resources/lecture-1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Centralized Systems</title>
      <link>http://localhost:1313/docs/lecture-resources/lecture-1/cs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/lecture-resources/lecture-1/cs/</guid>
      <description>&lt;h1 id=&#34;centralized-systems&#34;&gt;&#xA;  Centralized Systems&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#centralized-systems&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;-what-is-a-centralized-system&#34;&gt;&#xA;  🔍 What is a Centralized System?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-what-is-a-centralized-system&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A centralized system is an architecture where all processing, data storage, and control functions are concentrated in a single computational entity. This central node handles all requests, manages all resources, and serves as the sole decision-making authority.&lt;/p&gt;&#xA;&lt;p&gt;👉 All components, users, and services connect directly to this central entity without intermediate processing or control distribution.&lt;/p&gt;&#xA;&lt;h3 id=&#34;-real-world-analogy&#34;&gt;&#xA;  🏫 Real-World Analogy&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-real-world-analogy&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Imagine a traditional classroom setup:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Distributed Systems</title>
      <link>http://localhost:1313/docs/lecture-resources/lecture-1/ds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/lecture-resources/lecture-1/ds/</guid>
      <description>&lt;h1 id=&#34;introduction-to-distributed-systems&#34;&gt;&#xA;  Introduction to Distributed Systems&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#introduction-to-distributed-systems&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;-what-is-a-distributed-system&#34;&gt;&#xA;  ✨ What is a Distributed System?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-what-is-a-distributed-system&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A distributed system is a collection of autonomous computing elements that appears to its users as a single coherent system.&lt;/p&gt;&#xA;&lt;p&gt;👉 These independent nodes communicate and coordinate their actions by passing messages over a network to achieve a common goal.&lt;/p&gt;&#xA;&lt;h3 id=&#34;-technical-architecture&#34;&gt;&#xA;  🏗️ Technical Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-technical-architecture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    ┌──────────────────────────┐                 ┌────────────────────────┐&#xA;    │                          │                 │                        │&#xA;    │       CLIENT 1           │                 │       CLIENT 2         │&#xA;    │                          │                 │                        │&#xA;    └──────────────┬───────────┘                 └───────────┬────────────┘&#xA;                   │                                         │&#xA;                   │                                         │&#xA;                   │                                         │&#xA;                   ▼                                         ▼&#xA;                  ┌───────────────────────────────────┐&#xA;                  │                                   │&#xA;                  │        LOAD BALANCER             │&#xA;                  │                                   │&#xA;                  └───────────┬───────────┬───────────┘&#xA;                              │           │&#xA;                 ┌────────────┘           └────────────┐&#xA;                 │                                     │&#xA;    ┌────────────▼─────────────┐      ┌────────────────▼───────────┐&#xA;    │                          │      │                            │&#xA;    │      SERVER A            │◄────►│       SERVER B             │&#xA;    │  (Authentication)        │      │    (Product Catalog)       │&#xA;    │                          │      │                            │&#xA;    └────────────┬─────────────┘      └────────────┬───────────────┘&#xA;                 │                                  │&#xA;                 │            ┌────────────────┐    │&#xA;                 └───────────►│                │◄───┘&#xA;                              │   DATABASE     │&#xA;                              │                │&#xA;                              └────────┬───────┘&#xA;                                       │&#xA;                                       │&#xA;    ┌────────────────────────┐         │         ┌────────────────────────┐&#xA;    │                        │         │         │                        │&#xA;    │       SERVER C         │◄────────┴────────►│       SERVER D         │&#xA;    │    (Order Processing)  │                   │   (Payment Service)    │&#xA;    │                        │                   │                        │&#xA;    └────────────────────────┘                   └────────────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;-real-world-analogy&#34;&gt;&#xA;  🔍 Real-World Analogy&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-real-world-analogy&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Imagine a collaborative research project:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Types of Distributed Systems</title>
      <link>http://localhost:1313/docs/lecture-resources/lecture-1/types-ds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/lecture-resources/lecture-1/types-ds/</guid>
      <description>&lt;h1 id=&#34;types-of-distributed-systems&#34;&gt;&#xA;  Types of Distributed Systems&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#types-of-distributed-systems&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Distributed systems can be categorized based on their architecture, purpose, and how components interact. Each type has distinct characteristics that make it suitable for specific use cases.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-client-server-systems&#34;&gt;&#xA;  1. Client-Server Systems&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-client-server-systems&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;architecture&#34;&gt;&#xA;  Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;┌─────────┐     ┌─────────┐     ┌─────────┐&#xA;│         │     │         │     │         │&#xA;│ CLIENT  │────►│ SERVER  │◄────│ CLIENT  │&#xA;│    A    │     │         │     │    B    │&#xA;└─────────┘     └─────────┘     └─────────┘&#xA;                     ▲&#xA;                     │&#xA;                     ▼&#xA;                ┌─────────┐&#xA;                │         │&#xA;                │ CLIENT  │&#xA;                │    C    │&#xA;                └─────────┘&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;key-characteristics&#34;&gt;&#xA;  Key Characteristics&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#key-characteristics&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Role Separation&lt;/strong&gt;: Clear division between service providers (servers) and consumers (clients)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Centralized Control&lt;/strong&gt;: Servers manage resources and enforce access policies&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Request-Response Pattern&lt;/strong&gt;: Communication follows a request-response cycle&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Scalability Challenge&lt;/strong&gt;: Servers can become bottlenecks under high load&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;technical-implementation&#34;&gt;&#xA;  Technical Implementation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#technical-implementation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Communication Protocols&lt;/strong&gt;: HTTP/HTTPS, WebSockets, gRPC&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Load Distribution&lt;/strong&gt;: Often uses load balancers to distribute client requests&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;State Management&lt;/strong&gt;: Servers typically maintain session state&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;real-world-examples&#34;&gt;&#xA;  Real-World Examples&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#real-world-examples&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Web Applications&lt;/strong&gt;: Gmail, online banking portals&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;API Services&lt;/strong&gt;: Twitter API, payment gateways&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Database Clients&lt;/strong&gt;: SQL clients connecting to database servers&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Enterprise Applications&lt;/strong&gt;: SAP, Salesforce&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-peer-to-peer-p2p-systems&#34;&gt;&#xA;  2. Peer-to-Peer (P2P) Systems&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-peer-to-peer-p2p-systems&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;architecture-1&#34;&gt;&#xA;  Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;┌─────────┐     ┌─────────┐     ┌─────────┐&#xA;│         │◄───►│         │◄───►│         │&#xA;│ PEER A  │     │ PEER B  │     │ PEER C  │&#xA;│         │◄─┐  │         │  ┌─►│         │&#xA;└─────────┘  │  └─────────┘  │  └─────────┘&#xA;             │               │&#xA;             │  ┌─────────┐  │&#xA;             │  │         │  │&#xA;             └─►│ PEER D  │◄─┘&#xA;                │         │&#xA;                └─────────┘&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;key-characteristics-1&#34;&gt;&#xA;  Key Characteristics&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#key-characteristics-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Equality&lt;/strong&gt;: All nodes can function as both clients and servers&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Decentralization&lt;/strong&gt;: No central coordination point&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Resilience&lt;/strong&gt;: System continues functioning when nodes join or leave&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Resource Sharing&lt;/strong&gt;: Computing power, storage, and bandwidth are collectively shared&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;technical-implementation-1&#34;&gt;&#xA;  Technical Implementation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#technical-implementation-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Discovery Mechanisms&lt;/strong&gt;: DHT (Distributed Hash Tables), gossip protocols&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Routing Algorithms&lt;/strong&gt;: Chord, Kademlia, Pastry&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Data Replication&lt;/strong&gt;: Content is often replicated across multiple peers&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Security Challenges&lt;/strong&gt;: Trust establishment without central authority&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;real-world-examples-1&#34;&gt;&#xA;  Real-World Examples&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#real-world-examples-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;File Sharing&lt;/strong&gt;: BitTorrent, IPFS (InterPlanetary File System)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cryptocurrency Networks&lt;/strong&gt;: Bitcoin, Ethereum blockchain&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Communication Tools&lt;/strong&gt;: Early versions of Skype&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Distributed Computing&lt;/strong&gt;: BOINC platform projects&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-clustered-systems&#34;&gt;&#xA;  3. Clustered Systems&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-clustered-systems&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;architecture-2&#34;&gt;&#xA;  Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;┌───────────────────────────────────────┐&#xA;│                                       │&#xA;│            CLUSTER MANAGER            │&#xA;│                                       │&#xA;└───────┬───────────┬───────────┬───────┘&#xA;        │           │           │&#xA;        ▼           ▼           ▼&#xA;┌───────────┐ ┌───────────┐ ┌───────────┐&#xA;│           │ │           │ │           │&#xA;│  NODE 1   │ │  NODE 2   │ │  NODE 3   │&#xA;│           │ │           │ │           │&#xA;└───────────┘ └───────────┘ └───────────┘&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;key-characteristics-2&#34;&gt;&#xA;  Key Characteristics&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#key-characteristics-2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Physical Proximity&lt;/strong&gt;: Nodes typically located in the same data center&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Homogeneous Hardware&lt;/strong&gt;: Often uses similar or identical machines&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Shared Resources&lt;/strong&gt;: Common storage, memory, or processing capabilities&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;High Availability&lt;/strong&gt;: Designed for fault tolerance and continuous operation&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;technical-implementation-2&#34;&gt;&#xA;  Technical Implementation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#technical-implementation-2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Resource Management&lt;/strong&gt;: Uses cluster managers like Kubernetes, Mesos&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Job Scheduling&lt;/strong&gt;: Distributes workloads across available nodes&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Shared Storage&lt;/strong&gt;: Often uses distributed file systems or SANs&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Heartbeat Protocols&lt;/strong&gt;: Monitors node health and manages failover&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;real-world-examples-2&#34;&gt;&#xA;  Real-World Examples&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#real-world-examples-2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;High-Performance Computing&lt;/strong&gt;: Scientific simulation clusters&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Container Orchestration&lt;/strong&gt;: Kubernetes clusters running microservices&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Big Data Processing&lt;/strong&gt;: Hadoop/Spark clusters&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Database Clusters&lt;/strong&gt;: MySQL Cluster, PostgreSQL with replication&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;4-grid-computing-systems&#34;&gt;&#xA;  4. Grid Computing Systems&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-grid-computing-systems&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;architecture-3&#34;&gt;&#xA;  Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;┌───────────────┐     ┌───────────────┐&#xA;│  ORGANIZATION │     │  ORGANIZATION │&#xA;│       A       │     │       B       │&#xA;│ ┌─────┐ ┌─────┐     │ ┌─────┐ ┌─────┐&#xA;│ │NODE │ │NODE │     │ │NODE │ │NODE │&#xA;│ │  1  │ │  2  │     │ │  1  │ │  2  │&#xA;│ └─────┘ └─────┘     │ └─────┘ └─────┘&#xA;└───────┬───────┘     └───────┬───────┘&#xA;        │                     │&#xA;        ▼                     ▼&#xA;┌───────────────────────────────────────┐&#xA;│                                       │&#xA;│          GRID MIDDLEWARE              │&#xA;│                                       │&#xA;└───────────────────┬───────────────────┘&#xA;                    │&#xA;                    ▼&#xA;┌───────────────────────────────────────┐&#xA;│                                       │&#xA;│         RESEARCH PROBLEM              │&#xA;│                                       │&#xA;└───────────────────────────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;key-characteristics-3&#34;&gt;&#xA;  Key Characteristics&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#key-characteristics-3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Geographic Distribution&lt;/strong&gt;: Resources spread across multiple locations&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Heterogeneous Resources&lt;/strong&gt;: Different types of computers and networks&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Virtual Organizations&lt;/strong&gt;: Collaboration across institutional boundaries&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Resource Sharing&lt;/strong&gt;: Focuses on sharing computing power for large problems&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;technical-implementation-3&#34;&gt;&#xA;  Technical Implementation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#technical-implementation-3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Grid Middleware&lt;/strong&gt;: Software like Globus Toolkit that manages resources&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Job Submission&lt;/strong&gt;: Uses specialized protocols for submitting computing tasks&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Security Infrastructure&lt;/strong&gt;: Certificate-based authentication across domains&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Data Management&lt;/strong&gt;: Tools for moving large datasets between grid sites&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;real-world-examples-3&#34;&gt;&#xA;  Real-World Examples&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#real-world-examples-3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Scientific Computing&lt;/strong&gt;: SETI@home (search for extraterrestrial intelligence)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Medical Research&lt;/strong&gt;: Folding@home (protein folding simulations)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Particle Physics&lt;/strong&gt;: LHC Computing Grid (analyzing CERN data)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Climate Modeling&lt;/strong&gt;: Earth System Grid (climate simulation data)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;5-distributed-databases&#34;&gt;&#xA;  5. Distributed Databases&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-distributed-databases&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;architecture-4&#34;&gt;&#xA;  Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;┌─────────────┐      ┌─────────────┐&#xA;│             │      │             │&#xA;│  DATABASE   │◄────►│  DATABASE   │&#xA;│   NODE 1    │      │   NODE 2    │&#xA;│  (Shard A)  │      │  (Shard B)  │&#xA;└──────┬──────┘      └──────┬──────┘&#xA;       │                    │&#xA;       │     ┌─────────┐    │&#xA;       └────►│         │◄───┘&#xA;             │ QUERY   │&#xA;             │ ROUTER  │&#xA;             │         │&#xA;             └────┬────┘&#xA;                  │&#xA;                  ▼&#xA;             ┌─────────┐&#xA;             │         │&#xA;             │ CLIENT  │&#xA;             │         │&#xA;             └─────────┘&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;key-characteristics-4&#34;&gt;&#xA;  Key Characteristics&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#key-characteristics-4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Data Partitioning&lt;/strong&gt;: Information divided across multiple nodes (sharding)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Replication&lt;/strong&gt;: Data copied to multiple locations for redundancy&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Consistency Models&lt;/strong&gt;: Various approaches to maintaining data consistency&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Distributed Transactions&lt;/strong&gt;: Mechanisms for maintaining ACID properties across nodes&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;technical-implementation-4&#34;&gt;&#xA;  Technical Implementation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#technical-implementation-4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Consensus Algorithms&lt;/strong&gt;: Paxos, Raft for maintaining consistency&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Partitioning Strategies&lt;/strong&gt;: Range-based, hash-based, or directory-based sharding&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Query Processing&lt;/strong&gt;: Distributed query execution and optimization&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;CAP Theorem Tradeoffs&lt;/strong&gt;: Balancing Consistency, Availability, and Partition tolerance&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;real-world-examples-4&#34;&gt;&#xA;  Real-World Examples&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#real-world-examples-4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;NoSQL Databases&lt;/strong&gt;: Cassandra (AP system), MongoDB (CP system)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;NewSQL Databases&lt;/strong&gt;: Google Spanner, CockroachDB&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Time-Series Databases&lt;/strong&gt;: InfluxDB, TimescaleDB&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Graph Databases&lt;/strong&gt;: Neo4j (clustered), Amazon Neptune&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;6-distributed-file-systems&#34;&gt;&#xA;  6. Distributed File Systems&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#6-distributed-file-systems&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;architecture-5&#34;&gt;&#xA;  Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;┌─────────────┐      ┌─────────────┐&#xA;│             │      │             │&#xA;│   STORAGE   │      │   STORAGE   │&#xA;│   NODE 1    │      │   NODE 2    │&#xA;│             │      │             │&#xA;└──────┬──────┘      └──────┬──────┘&#xA;       │                    │&#xA;       │    ┌──────────┐    │&#xA;       └───►│          │◄───┘&#xA;            │ METADATA │&#xA;            │  SERVER  │&#xA;            │          │&#xA;            └─────┬────┘&#xA;                  │&#xA;                  ▼&#xA;             ┌─────────┐&#xA;             │         │&#xA;             │ CLIENT  │&#xA;             │         │&#xA;             └─────────┘&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;key-characteristics-5&#34;&gt;&#xA;  Key Characteristics&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#key-characteristics-5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Transparent Access&lt;/strong&gt;: Files appear as if they&amp;rsquo;re on a local system&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Location Independence&lt;/strong&gt;: Users don&amp;rsquo;t need to know physical file locations&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Fault Tolerance&lt;/strong&gt;: System continues operating despite node failures&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt;: Can add storage nodes to increase capacity&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;technical-implementation-5&#34;&gt;&#xA;  Technical Implementation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#technical-implementation-5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Chunking&lt;/strong&gt;: Files split into blocks distributed across nodes&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Metadata Management&lt;/strong&gt;: Separate servers track file locations and attributes&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Caching&lt;/strong&gt;: Local caching improves performance for frequently accessed files&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Consistency Protocols&lt;/strong&gt;: Mechanisms to handle concurrent file access&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;real-world-examples-5&#34;&gt;&#xA;  Real-World Examples&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#real-world-examples-5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cloud Storage&lt;/strong&gt;: Amazon S3, Google Cloud Storage&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Big Data Storage&lt;/strong&gt;: Hadoop Distributed File System (HDFS)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Enterprise Storage&lt;/strong&gt;: GlusterFS, Ceph&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Research Systems&lt;/strong&gt;: Google File System (GFS), Andrew File System (AFS)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;7-cloud-based-distributed-systems&#34;&gt;&#xA;  7. Cloud-Based Distributed Systems&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#7-cloud-based-distributed-systems&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;architecture-6&#34;&gt;&#xA;  Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;┌───────────────────────────────────────────────────────┐&#xA;│                                                       │&#xA;│                    CLOUD PROVIDER                     │&#xA;│                                                       │&#xA;│  ┌─────────────┐   ┌─────────────┐   ┌─────────────┐  │&#xA;│  │             │   │             │   │             │  │&#xA;│  │    COMPUTE  │   │   STORAGE   │   │  DATABASE   │  │&#xA;│  │   SERVICES  │   │  SERVICES   │   │  SERVICES   │  │&#xA;│  │             │   │             │   │             │  │&#xA;│  └─────────────┘   └─────────────┘   └─────────────┘  │&#xA;│                                                       │&#xA;└───────────────────────────┬───────────────────────────┘&#xA;                            │&#xA;                            ▼&#xA;┌───────────────┐    ┌─────────────┐    ┌───────────────┐&#xA;│               │    │             │    │               │&#xA;│    MOBILE     │    │    WEB      │    │     IOT       │&#xA;│    CLIENTS    │    │   CLIENTS   │    │    DEVICES    │&#xA;│               │    │             │    │               │&#xA;└───────────────┘    └─────────────┘    └───────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;key-characteristics-6&#34;&gt;&#xA;  Key Characteristics&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#key-characteristics-6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Elasticity&lt;/strong&gt;: Resources can scale up or down based on demand&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Service-Based&lt;/strong&gt;: Composed of multiple specialized services&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Multi-Tenancy&lt;/strong&gt;: Infrastructure shared among multiple customers&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pay-Per-Use&lt;/strong&gt;: Resources billed based on actual consumption&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;technical-implementation-6&#34;&gt;&#xA;  Technical Implementation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#technical-implementation-6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Virtualization&lt;/strong&gt;: Uses VMs, containers, or serverless functions&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Service Orchestration&lt;/strong&gt;: Automated provisioning and management&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;API Gateways&lt;/strong&gt;: Manages access to backend services&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Monitoring &amp;amp; Telemetry&lt;/strong&gt;: Distributed tracing and logging&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;real-world-examples-6&#34;&gt;&#xA;  Real-World Examples&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#real-world-examples-6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;IaaS&lt;/strong&gt;: Amazon EC2, Microsoft Azure VMs&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;PaaS&lt;/strong&gt;: Heroku, Google App Engine&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;SaaS&lt;/strong&gt;: Salesforce, Microsoft 365&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Serverless&lt;/strong&gt;: AWS Lambda, Azure Functions&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;8-microservices-architecture&#34;&gt;&#xA;  8. Microservices Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#8-microservices-architecture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;architecture-7&#34;&gt;&#xA;  Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;┌────────────┐  ┌────────────┐  ┌────────────┐&#xA;│            │  │            │  │            │&#xA;│   USER     │  │  PRODUCT   │  │   ORDER    │&#xA;│  SERVICE   │  │  SERVICE   │  │  SERVICE   │&#xA;│            │  │            │  │            │&#xA;└─────┬──────┘  └─────┬──────┘  └─────┬──────┘&#xA;      │               │               │&#xA;      │               │               │&#xA;      ▼               ▼               ▼&#xA;┌────────────────────────────────────────────┐&#xA;│                                            │&#xA;│              API GATEWAY                   │&#xA;│                                            │&#xA;└────────────────────┬───────────────────────┘&#xA;                     │&#xA;                     ▼&#xA;              ┌─────────────┐&#xA;              │             │&#xA;              │   CLIENT    │&#xA;              │             │&#xA;              └─────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;key-characteristics-7&#34;&gt;&#xA;  Key Characteristics&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#key-characteristics-7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Service Independence&lt;/strong&gt;: Each service can be developed and deployed separately&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Domain-Focused&lt;/strong&gt;: Services organized around business capabilities&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Decentralized Data&lt;/strong&gt;: Each service typically manages its own data&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Smart Endpoints, Dumb Pipes&lt;/strong&gt;: Logic in services, simple communication channels&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;technical-implementation-7&#34;&gt;&#xA;  Technical Implementation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#technical-implementation-7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Service Discovery&lt;/strong&gt;: Mechanisms for services to find each other&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;API Gateways&lt;/strong&gt;: Single entry point for clients&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Circuit Breakers&lt;/strong&gt;: Prevent cascading failures&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Event-Driven Communication&lt;/strong&gt;: Often uses message queues for asynchronous communication&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;real-world-examples-7&#34;&gt;&#xA;  Real-World Examples&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#real-world-examples-7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;E-commerce Platforms&lt;/strong&gt;: Amazon&amp;rsquo;s service-oriented architecture&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Streaming Services&lt;/strong&gt;: Netflix microservices (700+ services)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Financial Systems&lt;/strong&gt;: PayPal&amp;rsquo;s payment processing platform&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Transportation&lt;/strong&gt;: Uber&amp;rsquo;s ride-sharing platform&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Microservices</title>
      <link>http://localhost:1313/docs/lecture-resources/lecture-1/ms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/lecture-resources/lecture-1/ms/</guid>
      <description>&lt;h1 id=&#34;microservices-architecture&#34;&gt;&#xA;  Microservices Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#microservices-architecture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;definition-and-core-concepts&#34;&gt;&#xA;  Definition and Core Concepts&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#definition-and-core-concepts&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Microservices is an architectural approach where an application is structured as a &lt;strong&gt;collection of small, loosely coupled services&lt;/strong&gt;, each:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Focused on a specific business capability&lt;/li&gt;&#xA;&lt;li&gt;Independently deployable&lt;/li&gt;&#xA;&lt;li&gt;Communicating through well-defined APIs&lt;/li&gt;&#xA;&lt;li&gt;Owned by small teams&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This architecture stands in contrast to the traditional monolithic approach where all functionality exists in a single, tightly integrated application.&lt;/p&gt;&#xA;&lt;h3 id=&#34;architecture&#34;&gt;&#xA;  Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;┌─────────────────────────────────────────────────────────────────┐&#xA;│                                                                 │&#xA;│                        API GATEWAY                              │&#xA;│                                                                 │&#xA;└───────┬─────────────┬────────────────┬───────────────┬──────────┘&#xA;        │             │                │               │&#xA;        ▼             ▼                ▼               ▼&#xA;┌───────────┐  ┌─────────────┐  ┌────────────┐  ┌────────────┐&#xA;│           │  │             │  │            │  │            │&#xA;│    USER   │  │  PRODUCT    │  │   ORDER    │  │  PAYMENT   │&#xA;│  SERVICE  │  │  SERVICE    │  │  SERVICE   │  │  SERVICE   │&#xA;│           │  │             │  │            │  │            │&#xA;└─────┬─────┘  └──────┬──────┘  └─────┬──────┘  └─────┬──────┘&#xA;      │               │               │               │&#xA;      ▼               ▼               ▼               ▼&#xA;┌─────────┐    ┌─────────┐     ┌─────────┐     ┌─────────┐&#xA;│  USER   │    │ PRODUCT │     │  ORDER  │     │ PAYMENT │&#xA;│   DB    │    │   DB    │     │   DB    │     │   DB    │&#xA;└─────────┘    └─────────┘     └─────────┘     └─────────┘&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;-real-world-example-food-delivery-platform&#34;&gt;&#xA;  � Real-World Example: Food Delivery Platform&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-real-world-example-food-delivery-platform&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Imagine a food delivery platform like Uber Eats or Foodpanda. In a microservices architecture, this system would be decomposed into specialized services:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
