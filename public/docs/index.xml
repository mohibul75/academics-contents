<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Distributed Systems Lab</title>
    <link>http://localhost:1313/docs/</link>
    <description>Recent content in Docs on Distributed Systems Lab</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Details</title>
      <link>http://localhost:1313/docs/details/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/details/</guid>
      <description>&lt;h1 id=&#34;-distributed-systems-lab--detailed-breakdown&#34;&gt;&#xA;  üìö Distributed Systems Lab ‚Äî Detailed Breakdown&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-distributed-systems-lab--detailed-breakdown&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This lab is structured as a step-by-step journey through the lifecycle of building a distributed system with microservices.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-phase-1-monolithic-smart-library-system&#34;&gt;&#xA;  üöÄ Phase 1: Monolithic Smart Library System&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-phase-1-monolithic-smart-library-system&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;We begin with a &lt;strong&gt;monolithic design&lt;/strong&gt;, where all components of the system reside in a single codebase.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;You‚Äôll Learn:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How to structure a monolithic application&lt;/li&gt;&#xA;&lt;li&gt;Why monoliths become difficult to scale and maintain&lt;/li&gt;&#xA;&lt;li&gt;Building core modules: Users, Catalog, Borrowing&lt;/li&gt;&#xA;&lt;li&gt;Separation of concerns: Controller ‚Üí Service ‚Üí Repository layers&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-phase-2-transition-to-microservices&#34;&gt;&#xA;  üß© Phase 2: Transition to Microservices&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-phase-2-transition-to-microservices&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Next, we break down the monolith into independently deployable &lt;strong&gt;microservices&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prerequisites</title>
      <link>http://localhost:1313/docs/prerequisites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/prerequisites/</guid>
      <description>&lt;h1 id=&#34;-prerequisites&#34;&gt;&#xA;  üìã Prerequisites&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-prerequisites&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Before diving into the Smart Library System project, it‚Äôs important to ensure that students or participants have the foundational knowledge and hands-on exposure to the following areas:&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-1-basic-understanding-of-web-application--development&#34;&gt;&#xA;  üåê 1. Basic Understanding of Web Application &amp;amp; Development&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-1-basic-understanding-of-web-application--development&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Understand the &lt;strong&gt;client-server model&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Familiarity with how a web application works (browser ‚Üí server ‚Üí database).&lt;/li&gt;&#xA;&lt;li&gt;Concept of &lt;strong&gt;HTTP verbs&lt;/strong&gt;: &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, etc.&lt;/li&gt;&#xA;&lt;li&gt;Awareness of &lt;strong&gt;RESTful API principles&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Resource-oriented endpoints&lt;/li&gt;&#xA;&lt;li&gt;Stateless communication&lt;/li&gt;&#xA;&lt;li&gt;Uniform interface&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-2-api-development-in-any-language&#34;&gt;&#xA;  üîß 2. API Development in Any Language&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-2-api-development-in-any-language&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Participants should have prior experience with creating APIs in &lt;strong&gt;any programming language&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tools</title>
      <link>http://localhost:1313/docs/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/tools/</guid>
      <description>&lt;h1 id=&#34;-tools--technology-stack&#34;&gt;&#xA;  üõ†Ô∏è Tools &amp;amp; Technology Stack&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-tools--technology-stack&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This section outlines the recommended tools, frameworks, and platforms used in building and testing the &lt;strong&gt;Smart Library System (Microservices Architecture)&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-language--framework-preferences&#34;&gt;&#xA;  üöÄ Language &amp;amp; Framework Preferences&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-language--framework-preferences&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Choose any language or framework from below, depending on your expertise or lab instruction:&lt;/p&gt;&#xA;&lt;h3 id=&#34;-python&#34;&gt;&#xA;  üêç Python&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-python&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Framework&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;FastAPI&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;High-performance, modern API framework using ASGI. Ideal for microservices.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Flask&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Lightweight WSGI framework. Easy to use, good for learning microservice patterns.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Django&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Full-featured web framework. Use with Django REST Framework for API-based microservices.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;-nodejs&#34;&gt;&#xA;  üåê Node.js&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-nodejs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Framework&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Express.js&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Minimal and flexible framework for building REST APIs. Fast and widely used.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;-java&#34;&gt;&#xA;  ‚òï Java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Framework&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Spring Boot&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Production-grade microservice framework with robust dependency injection and JPA support.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;-c&#34;&gt;&#xA;  üß± C#&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Framework&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;.NET Core / ASP.NET Core&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Cross-platform microservice-ready framework by Microsoft. Supports REST APIs out-of-the-box.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-api-testing-tools&#34;&gt;&#xA;  üåê API Testing Tools&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-api-testing-tools&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Tool&lt;/th&gt;&#xA;          &lt;th&gt;Purpose&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Postman&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Powerful GUI for testing REST APIs.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Bruno&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Open-source and developer-friendly API testing alternative to Postman.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-preferred-operating-system&#34;&gt;&#xA;  üêß Preferred Operating System&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-preferred-operating-system&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;OS Version&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Ubuntu 22.04 LTS&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Long-Term Support, stable and widely used in cloud environments.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Ubuntu 24.04 LTS&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;(Upcoming/Recent) Updated LTS version with latest packages.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-preferred-databases&#34;&gt;&#xA;  üóÉÔ∏è Preferred Databases&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-preferred-databases&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Choose your preferred RDBMS per service ‚Äî all options are supported:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Phase 1</title>
      <link>http://localhost:1313/docs/phase-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/phase-1/</guid>
      <description>&lt;h1 id=&#34;-smart-library-system--monolithic-architecture&#34;&gt;&#xA;  üìò Smart Library System ‚Äì Monolithic Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-smart-library-system--monolithic-architecture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;&#xA;  Overview&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#overview&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;strong&gt;Smart Library System (Monolithic Version)&lt;/strong&gt; is a single, unified application that handles all core functionalities: managing users, books, and book loans. This system is ideal for simple deployments where all components are tightly coupled, sharing the same runtime and database.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-functional-modules&#34;&gt;&#xA;  üß© Functional Modules&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-functional-modules&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-user-management-module&#34;&gt;&#xA;  1. &lt;strong&gt;User Management Module&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-user-management-module&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Register a user (students/faculty).&lt;/li&gt;&#xA;&lt;li&gt;Update user profile.&lt;/li&gt;&#xA;&lt;li&gt;Retrieve user info.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-book-management-module&#34;&gt;&#xA;  2. &lt;strong&gt;Book Management Module&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-book-management-module&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Add/update/remove books.&lt;/li&gt;&#xA;&lt;li&gt;View book availability.&lt;/li&gt;&#xA;&lt;li&gt;Search books by title, author, or genre.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-loan-management-module&#34;&gt;&#xA;  3. &lt;strong&gt;Loan Management Module&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-loan-management-module&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Issue books to users.&lt;/li&gt;&#xA;&lt;li&gt;Return books.&lt;/li&gt;&#xA;&lt;li&gt;View active/past loans.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-unified-database-schema&#34;&gt;&#xA;  üõ¢Ô∏è Unified Database Schema&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-unified-database-schema&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Table&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;users&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Stores user information.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;books&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Stores book catalog details.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;loans&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Tracks issued/returned books.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;All modules interact with this &lt;strong&gt;shared relational database&lt;/strong&gt;, typically PostgreSQL or MySQL.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Phase 2</title>
      <link>http://localhost:1313/docs/phase-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/phase-2/</guid>
      <description>&lt;h1 id=&#34;-smart-library-system--microservices-architecture&#34;&gt;&#xA;  üß© Smart Library System ‚Äì Microservices Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-smart-library-system--microservices-architecture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;&#xA;  Overview&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#overview&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In the &lt;strong&gt;microservices version&lt;/strong&gt; of the Smart Library System, the application is divided into three independent services ‚Äî each responsible for a specific domain: &lt;strong&gt;User&lt;/strong&gt;, &lt;strong&gt;Book&lt;/strong&gt;, and &lt;strong&gt;Loan&lt;/strong&gt;. Every service has its &lt;strong&gt;own database&lt;/strong&gt; and communicates with others via &lt;strong&gt;HTTP APIs&lt;/strong&gt; (no queues or Kafka involved in this version).&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-services-overview&#34;&gt;&#xA;  üß± Services Overview&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-services-overview&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-user-service&#34;&gt;&#xA;  1. &lt;strong&gt;User Service&lt;/strong&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-user-service&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Handles registration, profile management, and user-related queries.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Phase 3</title>
      <link>http://localhost:1313/docs/phase-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/phase-3/</guid>
      <description>&lt;h2 id=&#34;-phase-3-reverse-proxy-with-nginx&#34;&gt;&#xA;  üåê Phase 3: Reverse Proxy with Nginx&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-phase-3-reverse-proxy-with-nginx&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This phase introduces &lt;strong&gt;Nginx&lt;/strong&gt; as a &lt;strong&gt;reverse proxy&lt;/strong&gt;, acting as the single entry point to route traffic to backend microservices.&lt;/p&gt;&#xA;&lt;h3 id=&#34;-youll-learn&#34;&gt;&#xA;  üéØ You‚Äôll Learn:&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-youll-learn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;What is a reverse proxy and why it&amp;rsquo;s important&lt;/li&gt;&#xA;&lt;li&gt;Routing and load balancing strategies&lt;/li&gt;&#xA;&lt;li&gt;How to serve APIs and static content behind Nginx&lt;/li&gt;&#xA;&lt;li&gt;Configuring HTTPS (SSL termination)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;-topics-covered&#34;&gt;&#xA;  üõ† Topics Covered:&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-topics-covered&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Installing and configuring Nginx on Linux&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;nginx.conf&lt;/code&gt; structure and virtual hosts&lt;/li&gt;&#xA;&lt;li&gt;Path-based routing:&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/api/users ‚Üí User Service  &#xA;/api/books ‚Üí Book Service  &#xA;/api/loans ‚Üí Loan Service  &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;Static file delivery for frontend (optional)&lt;/li&gt;&#xA;&lt;li&gt;Logging requests centrally&lt;/li&gt;&#xA;&lt;li&gt;Handling 404s and upstream errors&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Phase 4</title>
      <link>http://localhost:1313/docs/phase-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/phase-4/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;-phase-4-containerization-with-docker&#34;&gt;&#xA;  üê≥ Phase 4: Containerization with Docker&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-phase-4-containerization-with-docker&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;We encapsulate each microservice into its own &lt;strong&gt;Docker container&lt;/strong&gt; to achieve environment consistency and portability.&lt;/p&gt;&#xA;&lt;h3 id=&#34;-youll-learn&#34;&gt;&#xA;  üéØ You‚Äôll Learn:&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-youll-learn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Why containerization is essential in microservice ecosystems&lt;/li&gt;&#xA;&lt;li&gt;How to write Dockerfiles for Python, Node.js, Java, and .NET Core apps&lt;/li&gt;&#xA;&lt;li&gt;How to build and run containers&lt;/li&gt;&#xA;&lt;li&gt;Container networking and volume mounting&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;-topics-covered&#34;&gt;&#xA;  üõ† Topics Covered:&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-topics-covered&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Writing Dockerfiles for each service&lt;/li&gt;&#xA;&lt;li&gt;Installing dependencies inside containers&lt;/li&gt;&#xA;&lt;li&gt;Exposing ports and configuring environment variables&lt;/li&gt;&#xA;&lt;li&gt;Docker CLI basics: &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;logs&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Creating named networks for communication between services&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Phase 5</title>
      <link>http://localhost:1313/docs/phase-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/phase-5/</guid>
      <description>&lt;h2 id=&#34;-phase-5-managing-with-docker-compose&#34;&gt;&#xA;  ‚öôÔ∏è Phase 5: Managing with Docker Compose&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-phase-5-managing-with-docker-compose&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;With multiple services running, we now use &lt;strong&gt;Docker Compose&lt;/strong&gt; to manage them together through a unified configuration.&lt;/p&gt;&#xA;&lt;h3 id=&#34;-youll-learn&#34;&gt;&#xA;  üéØ You‚Äôll Learn:&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-youll-learn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Structuring a &lt;code&gt;docker-compose.yml&lt;/code&gt; file&lt;/li&gt;&#xA;&lt;li&gt;Defining services, networks, and volumes&lt;/li&gt;&#xA;&lt;li&gt;Scaling services for development/testing&lt;/li&gt;&#xA;&lt;li&gt;Making services talk to each other by name&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;-topics-covered&#34;&gt;&#xA;  üõ† Topics Covered:&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-topics-covered&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Docker Compose syntax and service definitions&lt;/li&gt;&#xA;&lt;li&gt;Declaring DB containers (e.g., Postgres, MySQL)&lt;/li&gt;&#xA;&lt;li&gt;Health checks and restart policies&lt;/li&gt;&#xA;&lt;li&gt;Local development workflows with Compose&lt;/li&gt;&#xA;&lt;li&gt;Mounting source code with &lt;code&gt;volumes:&lt;/code&gt; for live reloading&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Phase 6</title>
      <link>http://localhost:1313/docs/phase-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/phase-6/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;-phase-6-orchestration-with-docker-swarm&#34;&gt;&#xA;  üö¢ Phase 6: Orchestration with Docker Swarm&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-phase-6-orchestration-with-docker-swarm&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Once you‚Äôve mastered local development, we introduce &lt;strong&gt;Docker Swarm&lt;/strong&gt; for distributed service orchestration.&lt;/p&gt;&#xA;&lt;h3 id=&#34;-youll-learn&#34;&gt;&#xA;  üéØ You‚Äôll Learn:&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-youll-learn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Running your app on a multi-node Docker cluster&lt;/li&gt;&#xA;&lt;li&gt;Service scaling, rolling updates, and high availability&lt;/li&gt;&#xA;&lt;li&gt;Managing load balancing and service discovery&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;-topics-covered&#34;&gt;&#xA;  üõ† Topics Covered:&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-topics-covered&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Initializing a Docker Swarm (&lt;code&gt;docker swarm init&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Creating overlay networks&lt;/li&gt;&#xA;&lt;li&gt;Deploying stacks via &lt;code&gt;docker stack deploy&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Scaling services with replicas&lt;/li&gt;&#xA;&lt;li&gt;Monitoring service health and logs&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;üîÅ &lt;strong&gt;Optional Lab&lt;/strong&gt;: Simulate node failure and observe Swarm&amp;rsquo;s self-healing&lt;/p&gt;</description>
    </item>
    <item>
      <title>Systems Design</title>
      <link>http://localhost:1313/docs/system-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/system-design/</guid>
      <description>&lt;h2 id=&#34;-bonus-topics-system-design-essentials&#34;&gt;&#xA;  üß† Bonus Topics: System Design Essentials&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-bonus-topics-system-design-essentials&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Throughout the course, we‚Äôll integrate key &lt;strong&gt;system design concepts&lt;/strong&gt; critical to building scalable, resilient microservice-based systems.&lt;/p&gt;&#xA;&lt;h3 id=&#34;-concepts-discussed&#34;&gt;&#xA;  üß† Concepts Discussed:&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-concepts-discussed&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;CAP Theorem&lt;/strong&gt;: Consistency, Availability, Partition Tolerance&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Fault Tolerance&lt;/strong&gt;: Retry logic, timeouts, circuit breakers&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Scaling Strategies&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Vertical vs Horizontal&lt;/li&gt;&#xA;&lt;li&gt;Stateless service scaling&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Caching&lt;/strong&gt;: When and where to use Redis or in-memory caching&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Database Design&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Per-service DB&lt;/li&gt;&#xA;&lt;li&gt;Data duplication vs sync strategies&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Observability&lt;/strong&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Logs, metrics, traces&lt;/li&gt;&#xA;&lt;li&gt;Centralized logging (ELK/Loki)&lt;/li&gt;&#xA;&lt;li&gt;Prometheus &amp;amp; Grafana for monitoring&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>About Me</title>
      <link>http://localhost:1313/docs/about-me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/about-me/</guid>
      <description>&lt;h2 id=&#34;-about-me&#34;&gt;&#xA;  üë®‚Äçüíª About Me&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-about-me&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Hello! I‚Äôm &lt;strong&gt;Mohibul Alam&lt;/strong&gt;, a passionate and hands-on &lt;strong&gt;Senior DevOps Engineer&lt;/strong&gt; with a strong background in cloud infrastructure, automation, and modern backend systems. I bring over 3 years of experience designing and deploying &lt;strong&gt;scalable, secure, and high-performance solutions&lt;/strong&gt; across AWS, Azure, and on-premises environments.&lt;/p&gt;&#xA;&lt;p&gt;My expertise lies in &lt;strong&gt;DevOps automation, container orchestration, observability, and backend development&lt;/strong&gt;, with a growing interest in building intelligent systems powered by &lt;strong&gt;LLMs and AI agents&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
